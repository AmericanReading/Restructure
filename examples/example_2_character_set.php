<?php

/***************************************************************************************************
 * Example 2: Characters Set
 *
 * Demonstrate how to restructure rows into a set of unique objects for characters. The set will
 * contain each character only once and will identify characters using a field from the rows.
 *
 * This example will also demonstrate some of the shorthand syntax available.
 *
 * Note: The examples work with data from the CSV file examples/data/shows.csv. Take a look at the
 * contents of this file to get a feel for the data.
 *
 * The shows.csv file contains these columns:
 *     showId, characterId, petId, petTypeId, show, character, petName, petType
 *
 * When read from the csv_to_array() function, the result is an array of associative arrays with
 * a member for each column. Somthing like:
 *
 *     array(
 *         [0] => array(
 *             'showId' => 1,
 *             'characterId' => 1,
 *     ...
 *
 * This could just as easily be a fetched result set or any other array of arrays or objects.
 **************************************************************************************************/

use AmericanReading\Restructure\Item\CompoundItem;
use AmericanReading\Restructure\Item\SetItem;

// Autoloader for examples. You should use vendor/autoload.php generated by Composer.
require_once('lib/autoload.php');
require_once('lib/csv_to_array.php');

// Read the data from the CSV as a list of associative arrays.
// This could just as easily be a fetched result set or any other array of arrays or objects.
$rows = csv_to_array('data/shows.csv');

// Define an item instance for reading a character. This will look the same as it did in Example 1,
// but we'll create all of the members at once by passing an array to the constructor.
//
// The constructor feeds each item of the array to the addItem(). If an item is itself an array,
// the items of that array are used at the parameters.
//
// When we finished building out character and have it read the first row of the data, we'll get a
// result that looks like this (show in JSON for simplicity:)
//
//     {
//         "name": "Homer",
//         "show": "The Simpsons",
//         "characterId": 1
//     }
//
$character = new CompoundItem(
    array(
        array('name', 'character'),
        'show',
        array('characterId', null, 'intval')
    )
);

// Create a SetItem of characters. We can pass $character to the constructor to tell the instance
// it will create a unique collection of $character items.
$charactersSet = new SetItem($character);

// Before we can read the rows of data, we need to tell the $charactersSet how to determine which
// rows are referencing the same character. We do this by calling setReadIndexField() and passing
// the name of the column to read that itentifies the character. This will usually relate to an
// auto incremement field from a database or other unique identifier.
$charactersSet->setReadIndexField('characterId');

// Now, we can read the results.
$restructured = $charactersSet->readAll($rows);
print json_encode($restructured);

// You should end up with a list of characters that only includes one Bart this time.
