<?php

/***************************************************************************************************
 * Example 3: Characters and Pets
 *
 * Adds a list of pets to the characters from the previous example.
 *
 * Note: The examples work with data from the CSV file examples/data/shows.csv. Take a look at the
 * contents of this file to get a feel for the data.
 *
 * The shows.csv file contains these columns:
 *     showId, characterId, petId, petTypeId, show, character, petName, petType
 *
 * When read from the csv_to_array() function, the result is an array of associative arrays with
 * a member for each column. Somthing like:
 *
 *     array(
 *         [0] => array(
 *             'showId' => 1,
 *             'characterId' => 1,
 *     ...
 *
 * This could just as easily be a fetched result set or any other array of arrays or objects.
 **************************************************************************************************/

use AmericanReading\Restructure\Item\CompoundItem;
use AmericanReading\Restructure\Item\SetItem;

// Autoloader for examples. You should use vendor/autoload.php generated by Composer.
require_once('lib/autoload.php');
require_once('lib/csv_to_array.php');

// Read the data from the CSV as a list of associative arrays.
// This could just as easily be a fetched result set or any other array of arrays or objects.
$rows = csv_to_array('data/shows.csv');

// Define an item instance for reading a pet first.
$pet = new CompoundItem(
    array(
        array('petId', null, 'intval'),
        array('name', 'petName'),
        array('type', 'petType'),
    )
);

// Define a set for reading a collection of $pet items.
// Assign $pet as the item instance and 'petId' as the field to use to determine uniqueness.
$petSet = new SetItem($pet, 'petId');

// Create the characters as we did before, but this time, add $petSet as an item.
$character = new CompoundItem(
    array(
        array('name', 'character'),
        'show',
        array('characterId', null, 'intval'),
        array('pets', $petSet)
    )
);

// Create a SetItem of characters. We can pass $character to the constructor to tell the instance
// it will create a unique collection of $character items.
$charactersSet = new SetItem($character, 'characterId');

// Now, we can read the results.
$restructured = $charactersSet->readAll($rows);
print json_encode($restructured);

// You should end up with a list of characters with each character containing a list of pets.
