<?php

/***************************************************************************************************
 * Example 5: Scalar Set
 *
 * Build a list of shows, each containing a list of character names. Demonstrates how to build
 * collections of scalar Items.
 *
 * Note: The examples work with data from the CSV file examples/data/shows.csv. Take a look at the
 * contents of this file to get a feel for the data.
 *
 * The shows.csv file contains these columns:
 *     showId, characterId, petId, petTypeId, show, character, petName, petType
 *
 * When read from the csv_to_array() function, the result is an array of associative arrays with
 * a member for each column. Somthing like:
 *
 *     array(
 *         [0] => array(
 *             'showId' => 1,
 *             'characterId' => 1,
 *     ...
 *
 * This could just as easily be a fetched result set or any other array of arrays or objects.
 **************************************************************************************************/

use AmericanReading\Restructure\Item\CompoundItem;
use AmericanReading\Restructure\Item\Item;
use AmericanReading\Restructure\Item\SetItem;

// Autoloader for examples. You should use vendor/autoload.php generated by Composer.
require_once('lib/autoload.php');
require_once('lib/csv_to_array.php');

// Read the data from the CSV as a list of associative arrays.
// This could just as easily be a fetched result set or any other array of arrays or objects.
$rows = csv_to_array('data/shows.csv');

$characterNameSet = new SetItem(new Item('character'), 'character');
$show = new CompoundItem();
$show->addItem('show');
$show->addItem('characters', $characterNameSet);
$shows = new SetItem($show, 'show');

$restructured = $shows->readAll($rows);
print json_encode($restructured);
